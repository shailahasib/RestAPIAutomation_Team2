package tweetTest;

import io.restassured.response.ValidatableResponse;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import tweet.TweetAPIClientShaila;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.UUID;

public class TweetAPIClientShailaTest {

    private TweetAPIClientShaila tweetAPIClientShaila;

    @BeforeClass
    public void setUpTweetAPI() {
        this.tweetAPIClientShaila = new TweetAPIClientShaila();
    }

    @Test//working
    public void testUserCanGetStatus() {
        long id = 1212891076715057153L;
        ValidatableResponse response = this.tweetAPIClientShaila.getStatusesWithID(id);
        response.statusCode(200);
        System.out.println(response.extract().body().asPrettyString());
        //System.out.println(response.extract().body().asPrettyString());
       //String actualTweet = response.extract().body().path("text");
       //Assert.assertEquals(actualTweet, tweet, "Tweet is not match");
    }

    @Test//working
    public void testDelete() {
        long tweetId = 1331667960369475589L;
        String tweet = "Tweeting this 0d13f749-c84b-4563-b7fd-2f38c2e42128";
        ValidatableResponse deleteResponse = this.tweetAPIClientShaila.deleteTweet(tweetId);
        deleteResponse.statusCode(200);
        String actualTweet = deleteResponse.extract().body().path("text");
        Assert.assertEquals(tweet, actualTweet);
    }

    @Test//working
    public void testStatusRetweeters() {
        Long id = 1331716793149304845L;
        ValidatableResponse response = this.tweetAPIClientShaila.getStatusRetweeters(id);
        //2. Verify that the retweet was successful
        response.statusCode(200);
    }

    @Test//working
    public void testRetweet() {
        String id = "1331767921140506624";
        ValidatableResponse response = this.tweetAPIClientShaila.postRetweet(id);
        //2. Verify that the retweet was successful
        response.statusCode(200);
    }

    @Test//working
    public void testFavoriteOrLike() {
        Long id = 1331721099785220099L;
        ValidatableResponse response = this.tweetAPIClientShaila.postFavoritesOrCreate(id);
        //2. Verify that the tweet was successful
        response.statusCode(200);
    }

    @Test//working
    public void testDeleteFavoriteOrLike() {
        Long id = 1331721099785220099L;
        ValidatableResponse response = this.tweetAPIClientShaila.deleteFavorites(id);
        //2. Verify that the tweet was successful
        response.statusCode(200);
    }

    @Test// not working
    public void testDirectMessageCreate(){
        String payload ="{\"event\": {\"type\": \"message_create\", \"message_create\": {\"target\": {\"recipient_id\": \"50022611\"}, \"message_data\": {\"text\": \"Hello World!\"}}}}";
        ValidatableResponse response = this.tweetAPIClientShaila.messageCreate(payload);
        //2. Verify that the tweet was successful
        response.statusCode(200);
        System.out.println(response.extract().body().asPrettyString());
    }

    @Test//working
    public void testUserCanTweetSuccessfully() {
        //1. User send a tweet
        String tweet = "Testing..." + UUID.randomUUID().toString();
        ValidatableResponse response = this.tweetAPIClientShaila.createTweet(tweet);
        //2. Verify that the tweet was successful
        response.statusCode(200);
        String actualTweet = response.extract().body().path("text");
        Assert.assertEquals(actualTweet, tweet, "Tweet does not match expected");
    }


    @Test//working
    public void testResponseTime() {
        ValidatableResponse response = this.tweetAPIClientShaila.responseTime();
    }



    @Test //working
    public void testFollowerList() {
        long id = 500226111L;
        ValidatableResponse response = this.tweetAPIClientShaila.getFollowersList(id);
        response.statusCode(200);
        System.out.println(response.extract().body().asPrettyString());
        //System.out.println(response.extract().body().asPrettyString());
        //String actualTweet = response.extract().body().path("text");
        //Assert.assertEquals(actualTweet, tweet, "Tweet is not match");
    }


    @Test //working
    public void testImageUpload() {
        String image="";
        ValidatableResponse response = this.tweetAPIClientShaila.uploadImage(image);
        response.statusCode(200);
        System.out.println(response.extract().body().asPrettyString());
        //System.out.println(response.extract().body().asPrettyString());
        //String actualTweet = response.extract().body().path("text");
        //Assert.assertEquals(actualTweet, tweet, "Tweet is not match");
    }

    @Test//noy working
    public void testGetProfileBanner() {
        long userId = 500226111;
        ValidatableResponse response = this.tweetAPIClientShaila.getProfileBanner(userId);
        response.statusCode(200);
        System.out.println(response.extract().body().asPrettyString());
        //System.out.println(response.extract().body().asPrettyString());
        //String actualTweet = response.extract().body().path("text");
        //Assert.assertEquals(actualTweet, tweet, "Tweet is not match");
    }

    @Test//not working
    public void testCreateCollection() {
        ValidatableResponse response = this.tweetAPIClientShaila.createCollectionOfTweets();
        response.statusCode(200);
        System.out.println(response.extract().body().asPrettyString());
        //System.out.println(response.extract().body().asPrettyString());
        //String actualTweet = response.extract().body().path("text");
        //Assert.assertEquals(actualTweet, tweet, "Tweet is not match");
    }

    @Test//not working
    public void testGetTrends() {
        Long id = 2347591l;
        ValidatableResponse response = this.tweetAPIClientShaila.getTrendsLocation();
        response.statusCode(200);
        System.out.println(response.extract().body().asPrettyString());
        //System.out.println(response.extract().body().asPrettyString());
        //String actualTweet = response.extract().body().path("text");
        //Assert.assertEquals(actualTweet, tweet, "Tweet is not match");
    }


    @Test//not working
    public void testCreateFriendships() {
        String userId = "258793489";
        ValidatableResponse response = this.tweetAPIClientShaila.createFriendship();
        response.statusCode(200);
        System.out.println(response.extract().body().asPrettyString());
        //String actualTweet = response.extract().body().path("text");
        //Assert.assertEquals(actualTweet, tweet, "Tweet is not match");
    }


}





